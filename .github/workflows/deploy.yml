# .github/workflows/deploy.yml
name: Test, Build and Deploy EVA

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test_and_scan:
    name: Test & Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build environment for testing
        run: docker-compose -f docker-compose.prod.yml up --build -d

      - name: Wait for services to be healthy
        run: |
          echo "Waiting for services to initialize..."
          sleep 30 # Give services ample time to start and run healthchecks
          docker-compose -f docker-compose.prod.yml ps

      - name: Run Backend Tests
        run: docker-compose -f docker-compose.prod.yml exec -T main-api pytest

      - name: Run Frontend Tests
        run: docker-compose -f docker-compose.prod.yml exec -T frontend npm test

      - name: Scan Frontend Vulnerabilities
        run: docker-compose -f docker-compose.prod.yml exec -T frontend npm audit --audit-level=high

      - name: Scan Backend Vulnerabilities
        run: |
          docker-compose -f docker-compose.prod.yml exec -T main-api pip install pip-audit
          docker-compose -f docker-compose.prod.yml exec -T main-api pip-audit -r requirements.txt

  build_and_push:
    name: Build & Push Docker Images
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: test_and_scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push services
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/eva-main-api:latest ./services/main-api && docker push ${{ secrets.DOCKERHUB_USERNAME }}/eva-main-api:latest
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/eva-whatsapp-gateway:latest ./services/whatsapp-gateway && docker push ${{ secrets.DOCKERHUB_USERNAME }}/eva-whatsapp-gateway:latest
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/eva-transcription-worker:latest ./services/transcription-worker && docker push ${{ secrets.DOCKERHUB_USERNAME }}/eva-transcription-worker:latest
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/eva-embedding-worker:latest ./services/embedding-worker && docker push ${{ secrets.DOCKERHUB_USERNAME }}/eva-embedding-worker:latest
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/eva-dlq-monitor:latest ./services/dlq-monitor && docker push ${{ secrets.DOCKERHUB_USERNAME }}/eva-dlq-monitor:latest
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/eva-frontend:latest ./frontend && docker push ${{ secrets.DOCKERHUB_USERNAME }}/eva-frontend:latest

  deploy:
    name: Deploy to Production
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: build_and_push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to production server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            cd /home/ubuntu/eva-project # IMPORTANT: Adjust to your project path

            echo "Creating .env file from secrets..."
            cat << EOF > .env.prod
            # This file is auto-generated by the CI/CD pipeline
            DOMAIN_NAME=${{ secrets.DOMAIN_NAME }}
            CERTBOT_EMAIL=${{ secrets.CERTBOT_EMAIL }}
            SUPABASE_URL=${{ secrets.SUPABASE_URL }}
            SUPABASE_KEY=${{ secrets.SUPABASE_KEY }}
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
            GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}
            DEEPSEEK_API_KEY=${{ secrets.DEEPSEEK_API_KEY }}
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            OPENAI_EMBED_MODEL=text-embedding-3-large
            R2_ENDPOINT_URL=${{ secrets.R2_ENDPOINT_URL }}
            R2_BUCKET_NAME=${{ secrets.R2_BUCKET_NAME }}
            R2_ACCESS_KEY_ID=${{ secrets.R2_ACCESS_KEY_ID }}
            R2_SECRET_ACCESS_KEY=${{ secrets.R2_SECRET_ACCESS_KEY }}
            WHATSAPP_USER_ID=${{ secrets.WHATSAPP_USER_ID }}
            GRAFANA_ADMIN_PASSWORD=${{ secrets.GRAFANA_ADMIN_PASSWORD }}
            FRONTEND_ORIGINS=https://\${{ secrets.DOMAIN_NAME }}
            NEXT_PUBLIC_API_URL=https://\${{ secrets.DOMAIN_NAME }}/api/v1
            EOF

            echo "Pulling latest images from Docker Hub..."
            docker-compose -f docker-compose.prod.yml pull

            echo "Restarting all services..."
            docker-compose -f docker-compose.prod.yml up -d

            echo "Cleaning up old Docker images..."
            docker image prune -af

            echo "Deployment to production successful!"
