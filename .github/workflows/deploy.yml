name: CI/CD - Test, Build, and Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test-and-lint:
    name: Test and Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: docker compose -f docker-compose.prod.yml up -d

      - name: Wait for services to be healthy
        run: |
          echo "Waiting for services to be healthy..."
          for i in {1..30}; do
            STATUS=$(docker compose -f docker-compose.prod.yml ps --format '{{.Service}} {{.Status}}')
            echo "$STATUS"
            UNHEALTHY=$(echo "$STATUS" | grep -v 'Up (healthy)' || true)
            if [ -z "$UNHEALTHY" ]; then
              echo "All services are healthy"
              break
            fi
            if [ "$i" -eq 30 ]; then
              echo "Services failed to become healthy" >&2
              exit 1
            fi
            sleep 5
          done

      - name: Lint and Test Backend
        run: |
          docker compose -f docker-compose.prod.yml exec -T main-api ruff format --check .
          docker compose -f docker-compose.prod.yml exec -T main-api ruff check .
          docker compose -f docker-compose.prod.yml exec -T main-api pytest
          docker compose -f docker-compose.prod.yml exec -T transcription-worker ruff format --check .
          docker compose -f docker-compose.prod.yml exec -T transcription-worker ruff check .
          docker compose -f docker-compose.prod.yml exec -T transcription-worker pytest

      - name: Lint and Test Frontend
        run: |
          docker compose -f docker-compose.prod.yml exec -T frontend npm run lint
          docker compose -f docker-compose.prod.yml exec -T frontend npm run test

  integration-test:
    name: End-to-End Integration Test
    runs-on: ubuntu-latest
    needs: test-and-lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: docker compose -f docker-compose.prod.yml up -d

      - name: Wait for services to be healthy
        run: |
          echo "Waiting for services to be healthy..."
          for i in {1..30}; do
            STATUS=$(docker compose -f docker-compose.prod.yml ps --format '{{.Service}} {{.Status}}')
            echo "$STATUS"
            UNHEALTHY=$(echo "$STATUS" | grep -v 'Up (healthy)' || true)
            if [ -z "$UNHEALTHY" ]; then
              echo "All services are healthy"
              break
            fi
            if [ "$i" -eq 30 ]; then
              echo "Services failed to become healthy" >&2
              exit 1
            fi
            sleep 5
          done

      - name: Run End-to-End Test
        run: >
          docker compose -f docker-compose.prod.yml exec -T -e REDIS_HOST=redis main-api
          python /app/tests/end-to-end.py

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: integration-test
    if: github.event_name == 'push'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/eva-frontend:latest

      - name: Build and push Main API
        uses: docker/build-push-action@v5
        with:
          context: ./services/main-api
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/eva-main-api:latest

      - name: Build and push WhatsApp Gateway
        uses: docker/build-push-action@v5
        with:
          context: ./services/whatsapp-gateway
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/eva-whatsapp-gateway:latest

      - name: Build and push Transcription Worker
        uses: docker/build-push-action@v5
        with:
          context: ./services/transcription-worker
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/eva-transcription-worker:latest

      - name: Build and push Embedding Worker
        uses: docker/build-push-action@v5
        with:
          context: ./services/embedding-worker
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/eva-embedding-worker:latest

      - name: Build and push DLQ Monitor
        uses: docker/build-push-action@v5
        with:
          context: ./services/dlq-monitor
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/eva-dlq-monitor:latest

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push'
    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # IMPORTANT: Change this path to your project directory on the server
            cd /home/ubuntu/eva-platform

            # Create production environment file from secrets
            cat << EOF > .env.prod
            # Docker and Traefik
            DOMAIN_NAME=${{ secrets.DOMAIN_NAME }}
            CERTBOT_EMAIL=${{ secrets.CERTBOT_EMAIL }}

            # Redis
            REDIS_HOST=redis
            REDIS_PORT=6379

            # Supabase
            SUPABASE_URL=${{ secrets.SUPABASE_URL }}
            SUPABASE_KEY=${{ secrets.SUPABASE_KEY }}
            SUPABASE_SERVICE_KEY=${{ secrets.SUPABASE_SERVICE_KEY }}
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.SUPABASE_KEY }}

            # AI Providers
            GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}
            DEEPSEEK_API_KEY=${{ secrets.DEEPSEEK_API_KEY }}
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            OPENAI_EMBED_MODEL=text-embedding-3-large

            # Cloudflare R2
            R2_ENDPOINT_URL=${{ secrets.R2_ENDPOINT_URL }}
            R2_BUCKET_NAME=${{ secrets.R2_BUCKET_NAME }}
            R2_ACCESS_KEY_ID=${{ secrets.R2_ACCESS_KEY_ID }}
            R2_SECRET_ACCESS_KEY=${{ secrets.R2_SECRET_ACCESS_KEY }}

            # WhatsApp Gateway
            WHATSAPP_USER_ID=${{ secrets.WHATSAPP_USER_ID }}

            # Frontend
            FRONTEND_ORIGINS=https://${{ secrets.DOMAIN_NAME }}
            NEXT_PUBLIC_API_URL=https://${{ secrets.DOMAIN_NAME }}/api/v1

            # Main API
            API_RATE_LIMIT=100
            EOF

            # Pull latest images and restart services
            echo "Pulling latest images from Docker Hub..."
            docker-compose -f docker-compose.prod.yml pull

            echo "Restarting services with the new images..."
            docker-compose -f docker-compose.prod.yml up -d --remove-orphans
