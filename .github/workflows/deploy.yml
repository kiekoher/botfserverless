name: CI/CD - Test, Build, and Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test-and-lint:
    name: Test and Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: docker compose -f docker-compose.prod.yml up -d

      - name: Wait for services to be healthy
        run: docker compose -f docker-compose.prod.yml wait

      - name: Lint and Test Backend
        run: |
          docker compose -f docker-compose.prod.yml exec -T main-api ruff format --check .
          docker compose -f docker-compose.prod.yml exec -T main-api ruff check .
          docker compose -f docker-compose.prod.yml exec -T main-api pytest
          docker compose -f docker-compose.prod.yml exec -T transcription-worker ruff format --check .
          docker compose -f docker-compose.prod.yml exec -T transcription-worker ruff check .
          docker compose -f docker-compose.prod.yml exec -T transcription-worker pytest

      - name: Lint and Test Frontend
        run: |
          docker compose -f docker-compose.prod.yml exec -T frontend npm run lint
          docker compose -f docker-compose.prod.yml exec -T frontend npm run test

  integration-test:
    name: End-to-End Integration Test
    runs-on: ubuntu-latest
    needs: test-and-lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: docker compose -f docker-compose.prod.yml up -d

      - name: Wait for services to be healthy
        run: docker compose -f docker-compose.prod.yml wait

      - name: Run End-to-End Test
        run: >
          docker compose -f docker-compose.prod.yml exec -T -e REDIS_HOST=redis main-api
          python /app/tests/end-to-end.py

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: integration-test
    if: github.event_name == 'push'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/eva-frontend:latest

      - name: Build and push Main API
        uses: docker/build-push-action@v5
        with:
          context: ./services/main-api
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/eva-main-api:latest

      - name: Build and push WhatsApp Gateway
        uses: docker/build-push-action@v5
        with:
          context: ./services/whatsapp-gateway
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/eva-whatsapp-gateway:latest

      - name: Build and push Transcription Worker
        uses: docker/build-push-action@v5
        with:
          context: ./services/transcription-worker
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/eva-transcription-worker:latest

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push'
    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /app
            # Create production environment file from secrets
            echo "DOMAIN_NAME=${{ secrets.DOMAIN_NAME }}" > .env.prod
            echo "CERTBOT_EMAIL=${{ secrets.CERTBOT_EMAIL }}" >> .env.prod

            # Supabase
            echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> .env.prod
            echo "SUPABASE_KEY=${{ secrets.SUPABASE_KEY }}" >> .env.prod
            echo "NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}" >> .env.prod
            echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}" >> .env.prod

            # AI Models
            echo "GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}" >> .env.prod
            echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> .env.prod
            echo "DEEPSEEK_API_KEY=${{ secrets.DEEPSEEK_API_KEY }}" >> .env.prod
            echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env.prod

            # R2 Storage
            echo "R2_ENDPOINT_URL=${{ secrets.R2_ENDPOINT_URL }}" >> .env.prod
            echo "R2_BUCKET_NAME=${{ secrets.R2_BUCKET_NAME }}" >> .env.prod
            echo "R2_ACCESS_KEY_ID=${{ secrets.R2_ACCESS_KEY_ID }}" >> .env.prod
            echo "R2_SECRET_ACCESS_KEY=${{ secrets.R2_SECRET_ACCESS_KEY }}" >> .env.prod

            # Redis
            echo "REDIS_HOST=redis" >> .env.prod

            # Pull latest images and restart services
            docker-compose -f docker-compose.prod.yml pull
            docker-compose -f docker-compose.prod.yml down
            docker-compose -f docker-compose.prod.yml up -d
