# This is the production Nginx configuration.
# It handles SSL termination and proxies requests to the backend and frontend.

events {
    worker_connections 1024;
}

http {
    # It's good practice to define the upstream servers.
    # This makes the configuration cleaner and more maintainable.
    upstream backend_service {
        server backend:8000;
    }

    upstream frontend_service {
        server frontend:3000;
    }

    # This server block handles the initial HTTP requests.
    # It's responsible for redirecting all traffic to HTTPS and
    # handling the Let's Encrypt ACME challenge.
    server {
        listen 80;
        # Replace with your actual domain name.
        server_name your-domain.com www.your-domain.com;

        # This location is used by Certbot to verify domain ownership.
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        # Redirect all other HTTP traffic to HTTPS.
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # This server block handles all HTTPS traffic.
    server {
        listen 443 ssl;
        # Replace with your actual domain name.
        server_name your-domain.com www.your-domain.com;

        # SSL certificate paths. These should match the paths used by Certbot.
        # Make sure these files exist before starting Nginx with this config.
        ssl_certificate /etc/letsencrypt/live/your-domain.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/your-domain.com/privkey.pem;

        # Recommended SSL settings for security.
        # These are often provided by Certbot in /etc/letsencrypt/options-ssl-nginx.conf
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
        ssl_ecdh_curve secp384r1;
        ssl_session_cache shared:SSL:10m;
        ssl_session_tickets off;
        ssl_stapling on;
        ssl_stapling_verify on;

        # Location for the API backend.
        # All requests to /api/... will be forwarded to the backend service.
        location /api/ {
            proxy_pass http://backend_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Location for the frontend application.
        # All other requests will be forwarded to the frontend service.
        location / {
            proxy_pass http://frontend_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
    }
}
