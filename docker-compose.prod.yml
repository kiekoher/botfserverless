services:
  redis:
    image: redis:7.2-alpine
    container_name: eva_redis_prod
    restart: unless-stopped
    volumes:
      - redis_data:/data
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  traefik:
    image: traefik:v2.11
    container_name: eva_traefik_prod
    restart: unless-stopped
    environment:
      - CERTBOT_EMAIL=${CERTBOT_EMAIL}
    command:
      - "--api.dashboard=false"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.myresolver.acme.email=${CERTBOT_EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "traefik_data:/letsencrypt"
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  main-api:
    build:
      context: ./services/main-api
      dockerfile: Dockerfile
    container_name: eva_main_api_prod
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
    environment:
      - DOMAIN_NAME=${DOMAIN_NAME}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_EMBED_MODEL=${OPENAI_EMBED_MODEL}
      - REDIS_HOST=${REDIS_HOST}
      - FRONTEND_ORIGINS=${FRONTEND_ORIGINS}
    depends_on:
      - redis
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.main-api.rule=Host(`${DOMAIN_NAME}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.main-api.entrypoints=websecure"
      - "traefik.http.routers.main-api.tls.certresolver=myresolver"
      - "traefik.http.services.main-api.loadbalancer.server.port=8000"

  whatsapp-gateway:
    build:
      context: ./services/whatsapp-gateway
      dockerfile: Dockerfile
    container_name: eva_whatsapp_gateway_prod
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
    environment:
      - R2_ENDPOINT_URL=${R2_ENDPOINT_URL}
      - R2_BUCKET_NAME=${R2_BUCKET_NAME}
      - R2_ACCESS_KEY_ID=${R2_ACCESS_KEY_ID}
      - R2_SECRET_ACCESS_KEY=${R2_SECRET_ACCESS_KEY}
      - REDIS_HOST=${REDIS_HOST}
      - WHATSAPP_USER_ID=${WHATSAPP_USER_ID}
    volumes:
      - whatsapp_session_prod:/app/session
    depends_on:
      - redis
    healthcheck:
      test: ["CMD-SHELL", "node healthcheck.js"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  transcription-worker:
    build:
      context: ./services/transcription-worker
      dockerfile: Dockerfile
    container_name: eva_transcription_worker_prod
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
    environment:
      - R2_ENDPOINT_URL=${R2_ENDPOINT_URL}
      - R2_BUCKET_NAME=${R2_BUCKET_NAME}
      - R2_ACCESS_KEY_ID=${R2_ACCESS_KEY_ID}
      - R2_SECRET_ACCESS_KEY=${R2_SECRET_ACCESS_KEY}
      - REDIS_HOST=${REDIS_HOST}
    depends_on:
      - redis
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import redis, os; redis.Redis(host=os.getenv('REDIS_HOST','redis')).ping()\""]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  embedding-worker:
    build:
      context: ./services/embedding-worker
      dockerfile: Dockerfile
    container_name: eva_embedding_worker_prod
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
    environment:
      - R2_ENDPOINT_URL=${R2_ENDPOINT_URL}
      - R2_BUCKET_NAME=${R2_BUCKET_NAME}
      - R2_ACCESS_KEY_ID=${R2_ACCESS_KEY_ID}
      - R2_SECRET_ACCESS_KEY=${R2_SECRET_ACCESS_KEY}
      - REDIS_HOST=${REDIS_HOST}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_EMBED_MODEL=${OPENAI_EMBED_MODEL}
    depends_on:
      - redis
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import redis, os; redis.Redis(host=os.getenv('REDIS_HOST','redis')).ping()\""]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  dlq-monitor:
    build:
      context: ./services/dlq-monitor
      dockerfile: Dockerfile
    container_name: eva_dlq_monitor_prod
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
    environment:
      - REDIS_HOST=${REDIS_HOST}
    depends_on:
      - redis
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import redis, os; redis.Redis(host=os.getenv('REDIS_HOST','redis')).ping()\""]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: eva_frontend_prod
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
    environment:
      - DOMAIN_NAME=${DOMAIN_NAME}
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`${DOMAIN_NAME}`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=myresolver"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"

  loki:
    image: grafana/loki:2.9.0
    container_name: eva_loki_prod
    command: -config.file=/etc/loki/local-config.yaml
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  promtail:
    image: grafana/promtail:2.9.0
    container_name: eva_promtail_prod
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./promtail/promtail.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  redis_data:
  whatsapp_session_prod:
  traefik_data:
